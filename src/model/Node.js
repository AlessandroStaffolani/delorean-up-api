/**
 * DeloreanUp API
 * Server used to generate volume's backup using doc-nodes and send of this backups on a predefined persistent system (eg. NFS, SWIFT, ...)
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.5
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.DeloreanUpApi) {
      root.DeloreanUpApi = {};
    }
    root.DeloreanUpApi.Node = factory(root.DeloreanUpApi.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';




  /**
   * The Node model module.
   * @module model/Node
   * @version 1.0.0
   */

  /**
   * Constructs a new <code>Node</code>.
   * @alias module:model/Node
   * @class
   */
  var exports = function() {
    var _this = this;






  };

  /**
   * Constructs a <code>Node</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/Node} obj Optional instance to populate.
   * @return {module:model/Node} The populated <code>Node</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('id')) {
        obj['id'] = ApiClient.convertToType(data['id'], 'String');
      }
      if (data.hasOwnProperty('ip')) {
        obj['ip'] = ApiClient.convertToType(data['ip'], 'String');
      }
      if (data.hasOwnProperty('port')) {
        obj['port'] = ApiClient.convertToType(data['port'], 'Number');
      }
      if (data.hasOwnProperty('protocol')) {
        obj['protocol'] = ApiClient.convertToType(data['protocol'], 'String');
      }
      if (data.hasOwnProperty('apiVersion')) {
        obj['apiVersion'] = ApiClient.convertToType(data['apiVersion'], 'String');
      }
    }
    return obj;
  }

  /**
   * Unique identifier of the node
   * @member {String} id
   */
  exports.prototype['id'] = undefined;
  /**
   * ip of the node
   * @member {String} ip
   */
  exports.prototype['ip'] = undefined;
  /**
   * port of the node
   * @member {Number} port
   */
  exports.prototype['port'] = undefined;
  /**
   * protocol to use to communicate with the node
   * @member {String} protocol
   * @default 'http'
   */
  exports.prototype['protocol'] = 'http';
  /**
   * version of the doc-node api installed in the node
   * @member {String} apiVersion
   */
  exports.prototype['apiVersion'] = undefined;



  return exports;
}));


