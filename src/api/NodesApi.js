/**
 * DeloreanUp API
 * Server used to generate volume's backup using doc-nodes and send of this backups on a predefined persistent system (eg. NFS, SWIFT, ...)
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.5
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Container', 'model/Error', 'model/InlineResponse200', 'model/InlineResponse2001', 'model/InlineResponse2002', 'model/InlineResponse2003'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Container'), require('../model/Error'), require('../model/InlineResponse200'), require('../model/InlineResponse2001'), require('../model/InlineResponse2002'), require('../model/InlineResponse2003'));
  } else {
    // Browser globals (root is window)
    if (!root.DeloreanUpApi) {
      root.DeloreanUpApi = {};
    }
    root.DeloreanUpApi.NodesApi = factory(root.DeloreanUpApi.ApiClient, root.DeloreanUpApi.Container, root.DeloreanUpApi.Error, root.DeloreanUpApi.InlineResponse200, root.DeloreanUpApi.InlineResponse2001, root.DeloreanUpApi.InlineResponse2002, root.DeloreanUpApi.InlineResponse2003);
  }
}(this, function(ApiClient, Container, Error, InlineResponse200, InlineResponse2001, InlineResponse2002, InlineResponse2003) {
  'use strict';

  /**
   * Nodes service.
   * @module api/NodesApi
   * @version 1.0.0
   */

  /**
   * Constructs a new NodesApi. 
   * @alias module:api/NodesApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the containerBackupPOST operation.
     * @callback module:api/NodesApi~containerBackupPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2003} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create backup of the container passed by Id.
     * Create a backup file for each volumes mounted in a container from those active in the node requested
     * @param {String} nodeId ID of the node
     * @param {String} containerId ID of the container to return
     * @param {module:api/NodesApi~containerBackupPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2003}
     */
    this.containerBackupPOST = function(nodeId, containerId, callback) {
      var postBody = null;

      // verify the required parameter 'nodeId' is set
      if (nodeId === undefined || nodeId === null) {
        throw new Error("Missing the required parameter 'nodeId' when calling containerBackupPOST");
      }

      // verify the required parameter 'containerId' is set
      if (containerId === undefined || containerId === null) {
        throw new Error("Missing the required parameter 'containerId' when calling containerBackupPOST");
      }


      var pathParams = {
        'nodeId': nodeId,
        'containerId': containerId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = InlineResponse2003;

      return this.apiClient.callApi(
        '/nodes/{nodeId}/containers/{containerId}/backup', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the containerMountsGET operation.
     * @callback module:api/NodesApi~containerMountsGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2002} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns an array of mounts object.
     * Allow to retrive the mounts object list of a container from those active in the node requested
     * @param {String} nodeId ID of the node
     * @param {String} containerId ID of the container to return
     * @param {module:api/NodesApi~containerMountsGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2002}
     */
    this.containerMountsGET = function(nodeId, containerId, callback) {
      var postBody = null;

      // verify the required parameter 'nodeId' is set
      if (nodeId === undefined || nodeId === null) {
        throw new Error("Missing the required parameter 'nodeId' when calling containerMountsGET");
      }

      // verify the required parameter 'containerId' is set
      if (containerId === undefined || containerId === null) {
        throw new Error("Missing the required parameter 'containerId' when calling containerMountsGET");
      }


      var pathParams = {
        'nodeId': nodeId,
        'containerId': containerId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = InlineResponse2002;

      return this.apiClient.callApi(
        '/nodes/{nodeId}/containers/{containerId}/mounts', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the nodeContainerByIdGET operation.
     * @callback module:api/NodesApi~nodeContainerByIdGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Container} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a container object.
     * Allow to retrive a single container object from those active in the node request
     * @param {String} nodeId ID of the node
     * @param {String} containerId ID of the container to return
     * @param {module:api/NodesApi~nodeContainerByIdGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Container}
     */
    this.nodeContainerByIdGET = function(nodeId, containerId, callback) {
      var postBody = null;

      // verify the required parameter 'nodeId' is set
      if (nodeId === undefined || nodeId === null) {
        throw new Error("Missing the required parameter 'nodeId' when calling nodeContainerByIdGET");
      }

      // verify the required parameter 'containerId' is set
      if (containerId === undefined || containerId === null) {
        throw new Error("Missing the required parameter 'containerId' when calling nodeContainerByIdGET");
      }


      var pathParams = {
        'nodeId': nodeId,
        'containerId': containerId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = Container;

      return this.apiClient.callApi(
        '/nodes/{nodeId}/containers/{containerId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the nodeContainersGET operation.
     * @callback module:api/NodesApi~nodeContainersGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2001} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of active container in a node.
     * Allow to retrive all the active containers from the node requested by its Id
     * @param {String} nodeId ID of the node
     * @param {module:api/NodesApi~nodeContainersGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2001}
     */
    this.nodeContainersGET = function(nodeId, callback) {
      var postBody = null;

      // verify the required parameter 'nodeId' is set
      if (nodeId === undefined || nodeId === null) {
        throw new Error("Missing the required parameter 'nodeId' when calling nodeContainersGET");
      }


      var pathParams = {
        'nodeId': nodeId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = InlineResponse2001;

      return this.apiClient.callApi(
        '/nodes/{nodeId}/containers', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the nodesGET operation.
     * @callback module:api/NodesApi~nodesGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of nodes.
     * Allow to retrive all nodes that are configurated to be active
     * @param {module:api/NodesApi~nodesGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200}
     */
    this.nodesGET = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = InlineResponse200;

      return this.apiClient.callApi(
        '/nodes/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
